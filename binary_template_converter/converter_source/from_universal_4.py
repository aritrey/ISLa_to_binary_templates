# code in this file adapted from:
# https://github.com/Normynator/BTMeetsCFG/tree/8a0ec99bd6e08dc59c09650631c3cf5afc59817a (private repository)
# last access: 09.01.2023
# GPL-3.0 license 
# Copyright (c) 2022 Norman Ziebal


from typing import Dict, List
from typing import Optional, TextIO
from isla_converter.universal_isla_converter import UniversalIslaConverter
from universal_lexer import UniversalLexer
from universal_parser import UniversalParser


class FromUniversal:
    def __init__(self, input_grammar: Dict[str, List[str]],isla_file: Optional[TextIO]):
        self.input_grammar = input_grammar
        self.isla_file=isla_file


    def convert(self):
        # 1. Step: Run the lexer and get all tokens in a usable format.
        lexer = UniversalLexer(self.input_grammar)
        #print("Lexer result:", lexer)

        # 2. Step: Run the Isla converter and get constraint info
        isla = UniversalIslaConverter(self.isla_file, self.input_grammar, lexer)
        isla_info,spezRules, originalNameList=isla.getConstraintInfo()
        #print("Isla result:", isla_info)

        # 3. Step: Run the parser with the tokens generated by the lexer.
        parser = UniversalParser(lexer)
        return parser.parse(isla_info,spezRules,originalNameList)

